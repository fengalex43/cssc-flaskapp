name: build-unsigned-flask-app

on:
  workflow_dispatch
  # push:
  #   branches: [ main ]
  # pull_request:
  #   branches: [ main ]

env:
  BASE_IMAGE_REGISTRY: ${{ vars.BASE_IMAGE_REGISTRY }}
  BASE_IMAGE_REPO: ${{ vars.BASE_IMAGE_REPO }}
  BASE_IMAGE_TAG: ${{ vars.BASE_IMAGE_TAG }}
  TARGET_IMAGE_REGISTRY: ${{ vars.TARGET_IMAGE_REGISTRY }}
  TARGET_IMAGE_REPO: flaskapp
  TARGET_IMAGE_TAG: ${{ vars.TARGET_IMAGE_TAG }}
  # SIGNING_KEY_ID: ${{ vars.SIGNING_KEY_ID }}
  AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
  DOCKERHUB_REGISTRY: ${{ vars.DOCKERHUB_REGISTRY }}
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

jobs:
  build-unsigned-flask-app:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:    
      - name: Copy python:3.12.2 to Docker Hub
        uses: truemark/skopeo-copy-action@v1
        with:
          src-image: "docker://library/python:3.12.2"
          dest-image: "${{ vars.DOCKERHUB_REGISTRY }}/python:3.12"
          dest-username: ${{ secrets.DOCKERHUB_USERNAME }}
          dest-password: ${{ secrets.DOCKERHUB_TOKEN }}
          multi-arch: "system"
      
      - name: Checkout the code
        uses: actions/checkout@v4
      
      - name: Setup Notation CLI
        uses: notaryproject/notation-action/setup@v1
        with:
          version: "1.0.0"
      
      - name: Sign into Azure
        uses: Azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Sign into ACR
        run: |
            az acr login --name ${{ env.BASE_IMAGE_REGISTRY }}
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build and push the Flask app image
        uses: docker/build-push-action@v5
        with:
          context: ./sample
          push: true
          provenance: mode=max
          tags: ${{ env.TARGET_IMAGE_REGISTRY }}/${{ env.TARGET_IMAGE_REPO }}:${{ env.TARGET_IMAGE_TAG }}
          build-args: |
            BASE_IMAGE=${{ env.BASE_IMAGE_REGISTRY }}/${{ env.BASE_IMAGE_REPO }}:${{ env.BASE_IMAGE_TAG }}
